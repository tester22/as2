//$Header: /cvsroot-fuse/mec-as2/b47/de/mendelson/comm/as2/preferences/PreferencesPanelSecurity.java,v 1.1 2015/01/06 11:07:45 heller Exp $
package de.mendelson.comm.as2.preferences;

import de.mendelson.util.MecFileChooser;
import de.mendelson.util.MecResourceBundle;
import de.mendelson.util.clientserver.BaseClient;
import de.mendelson.util.clientserver.clients.filesystemview.RemoteFileBrowser;
import de.mendelson.util.clientserver.clients.preferences.PreferencesClient;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import javax.swing.JFrame;
import javax.swing.SwingUtilities;
/*
 * Copyright (C) mendelson-e-commerce GmbH Berlin Germany
 *
 * This software is subject to the license agreement set forth in the license.
 * Please read and agree to all terms before using this software.
 * Other product and brand names are trademarks of their respective owners.
 */

/**
 * Panel to define the directory preferences
 *
 * @author S.Heller
 * @version: $Revision: 1.1 $
 */
public class PreferencesPanelSecurity extends PreferencesPanel {

    /**
     * Localize the GUI
     */
    private MecResourceBundle rb = null;

    /**
     * GUI prefs
     */
    private PreferencesClient preferences;
    private BaseClient baseClient;

    /**
     * Creates new form PreferencesPanelDirectories
     */
    public PreferencesPanelSecurity(BaseClient baseClient) {
        //load resource bundle
        try {
            this.rb = (MecResourceBundle) ResourceBundle.getBundle(
                    ResourceBundlePreferences.class.getName());
        } catch (MissingResourceException e) {
            throw new RuntimeException("Oops..resource bundle "
                    + e.getClassName() + " not found.");
        }
        this.baseClient = baseClient;
        this.preferences = new PreferencesClient(baseClient);
        this.initComponents();
    }

    /**
     * Sets new preferences to this panel to changes/modify
     */
    @Override
    public void loadPreferences() {
        this.jTextFieldKeystoreHTTPS.setText(this.preferences.get(PreferencesAS2.KEYSTORE_HTTPS_SEND));
        this.jPasswordFieldKeystoreHTTPPass.setText(this.preferences.get(PreferencesAS2.KEYSTORE_HTTPS_SEND_PASS));
        this.jPasswordFieldKeystorePass.setText(this.preferences.get(PreferencesAS2.KEYSTORE_PASS));
        this.jTextFieldKeystoreEncryptionSign.setText(this.preferences.get(PreferencesAS2.KEYSTORE));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jTextFieldKeystoreHTTPS = new javax.swing.JTextField();
        jLabelKeystoreHTTPS = new javax.swing.JLabel();
        jButtonBrowseKeystoreHTTPS = new javax.swing.JButton();
        jLabelKeystoreHTTPSPass = new javax.swing.JLabel();
        jPasswordFieldKeystoreHTTPPass = new javax.swing.JPasswordField();
        jLabelKeystorePass = new javax.swing.JLabel();
        jPasswordFieldKeystorePass = new javax.swing.JPasswordField();
        jLabelKeystoreEncryptionSign = new javax.swing.JLabel();
        jTextFieldKeystoreEncryptionSign = new javax.swing.JTextField();
        jScrollPaneHint = new javax.swing.JScrollPane();
        jTextAreaHint = new javax.swing.JTextArea();

        setLayout(new java.awt.GridBagLayout());

        jTextFieldKeystoreHTTPS.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldKeystoreHTTPSKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jTextFieldKeystoreHTTPS, gridBagConstraints);

        jLabelKeystoreHTTPS.setText(this.rb.getResourceString( "label.keystore.https"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jLabelKeystoreHTTPS, gridBagConstraints);

        jButtonBrowseKeystoreHTTPS.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/mendelson/comm/as2/preferences/folder.gif"))); // NOI18N
        jButtonBrowseKeystoreHTTPS.setToolTipText(this.rb.getResourceString( "button.browse"));
        jButtonBrowseKeystoreHTTPS.setMargin(new java.awt.Insets(2, 5, 2, 5));
        jButtonBrowseKeystoreHTTPS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBrowseKeystoreHTTPSActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jButtonBrowseKeystoreHTTPS, gridBagConstraints);

        jLabelKeystoreHTTPSPass.setText(this.rb.getResourceString( "label.keystore.https.pass"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jLabelKeystoreHTTPSPass, gridBagConstraints);

        jPasswordFieldKeystoreHTTPPass.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jPasswordFieldKeystoreHTTPPassKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jPasswordFieldKeystoreHTTPPass, gridBagConstraints);

        jLabelKeystorePass.setText(this.rb.getResourceString( "label.keystore.pass"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jLabelKeystorePass, gridBagConstraints);

        jPasswordFieldKeystorePass.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jPasswordFieldKeystorePassKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jPasswordFieldKeystorePass, gridBagConstraints);

        jLabelKeystoreEncryptionSign.setText(this.rb.getResourceString( "label.keystore.encryptionsign"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jLabelKeystoreEncryptionSign, gridBagConstraints);

        jTextFieldKeystoreEncryptionSign.setEditable(false);
        jTextFieldKeystoreEncryptionSign.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldKeystoreEncryptionSignKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jTextFieldKeystoreEncryptionSign, gridBagConstraints);

        jScrollPaneHint.setBorder(null);
        jScrollPaneHint.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneHint.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextAreaHint.setEditable(false);
        jTextAreaHint.setBackground(javax.swing.UIManager.getDefaults().getColor("Panel.background"));
        jTextAreaHint.setColumns(20);
        jTextAreaHint.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jTextAreaHint.setLineWrap(true);
        jTextAreaHint.setRows(5);
        jTextAreaHint.setText(this.rb.getResourceString( "keystore.hint"));
        jTextAreaHint.setWrapStyleWord(true);
        jTextAreaHint.setBorder(null);
        jScrollPaneHint.setViewportView(jTextAreaHint);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(20, 5, 5, 5);
        add(jScrollPaneHint, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void jPasswordFieldKeystorePassKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jPasswordFieldKeystorePassKeyReleased
        this.preferences.put(PreferencesAS2.KEYSTORE_PASS, new String(this.jPasswordFieldKeystorePass.getPassword()));
    }//GEN-LAST:event_jPasswordFieldKeystorePassKeyReleased

    private void jButtonBrowseKeystoreHTTPSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBrowseKeystoreHTTPSActionPerformed
        JFrame parent = (JFrame) SwingUtilities.getAncestorOfClass(JFrame.class, this);
        RemoteFileBrowser browser = new RemoteFileBrowser(parent, this.baseClient,
                this.rb.getResourceString("filechooser.keystore"));
        browser.setDirectoriesOnly(false);
        browser.setSelectedFile(this.jTextFieldKeystoreHTTPS.getText());
        browser.setVisible(true);
        String selectedPath = browser.getSelectedPath();
        if (selectedPath != null && selectedPath.trim().length() > 0) {
            this.jTextFieldKeystoreHTTPS.setText(selectedPath);
        }
        this.preferences.put(PreferencesAS2.KEYSTORE_HTTPS_SEND, this.jTextFieldKeystoreHTTPS.getText());
    }//GEN-LAST:event_jButtonBrowseKeystoreHTTPSActionPerformed

    private void jPasswordFieldKeystoreHTTPPassKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jPasswordFieldKeystoreHTTPPassKeyReleased
        this.preferences.put(PreferencesAS2.KEYSTORE_HTTPS_SEND_PASS, new String(this.jPasswordFieldKeystoreHTTPPass.getPassword()));
    }//GEN-LAST:event_jPasswordFieldKeystoreHTTPPassKeyReleased

    private void jTextFieldKeystoreHTTPSKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldKeystoreHTTPSKeyReleased
        this.preferences.put(PreferencesAS2.KEYSTORE_HTTPS_SEND, this.jTextFieldKeystoreHTTPS.getText());
    }//GEN-LAST:event_jTextFieldKeystoreHTTPSKeyReleased

    private void jTextFieldKeystoreEncryptionSignKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldKeystoreEncryptionSignKeyReleased
        // TODO add your handling code here:
}//GEN-LAST:event_jTextFieldKeystoreEncryptionSignKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonBrowseKeystoreHTTPS;
    private javax.swing.JLabel jLabelKeystoreEncryptionSign;
    private javax.swing.JLabel jLabelKeystoreHTTPS;
    private javax.swing.JLabel jLabelKeystoreHTTPSPass;
    private javax.swing.JLabel jLabelKeystorePass;
    private javax.swing.JPasswordField jPasswordFieldKeystoreHTTPPass;
    private javax.swing.JPasswordField jPasswordFieldKeystorePass;
    private javax.swing.JScrollPane jScrollPaneHint;
    private javax.swing.JTextArea jTextAreaHint;
    private javax.swing.JTextField jTextFieldKeystoreEncryptionSign;
    private javax.swing.JTextField jTextFieldKeystoreHTTPS;
    // End of variables declaration//GEN-END:variables

    @Override
    public void savePreferences() {
        //NOP
    }

    @Override
    public String getIconResource() {
        return ("/de/mendelson/comm/as2/preferences/security32x32.gif");
    }

    @Override
    public String getTabResource() {
        return ("tab.security");
    }

}
